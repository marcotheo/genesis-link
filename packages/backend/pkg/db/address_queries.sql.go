// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: address_queries.sql

package db

import (
	"context"
	"database/sql"
)

const createAddress = `-- name: CreateAddress :exec
INSERT INTO addresses (
    addressId,
    country,
    region,
    province,
    city,
    barangay,
    addressDetails,
    orgId
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING addressid, country, region, province, city, barangay, addressdetails, orgid, created_at, updated_at
`

type CreateAddressParams struct {
	Addressid      string
	Country        string
	Region         sql.NullString
	Province       sql.NullString
	City           sql.NullString
	Barangay       sql.NullString
	Addressdetails sql.NullString
	Orgid          string
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) error {
	_, err := q.db.ExecContext(ctx, createAddress,
		arg.Addressid,
		arg.Country,
		arg.Region,
		arg.Province,
		arg.City,
		arg.Barangay,
		arg.Addressdetails,
		arg.Orgid,
	)
	return err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM addresses
WHERE addressId = ? AND orgId = ?
`

type DeleteAddressParams struct {
	Addressid string
	Orgid     string
}

func (q *Queries) DeleteAddress(ctx context.Context, arg DeleteAddressParams) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, arg.Addressid, arg.Orgid)
	return err
}

const getAllAddressByOrgId = `-- name: GetAllAddressByOrgId :many
SELECT addressid, country, region, province, city, barangay, addressdetails, orgid, created_at, updated_at FROM addresses
WHERE orgId = ?
`

func (q *Queries) GetAllAddressByOrgId(ctx context.Context, orgid string) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAllAddressByOrgId, orgid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.Addressid,
			&i.Country,
			&i.Region,
			&i.Province,
			&i.City,
			&i.Barangay,
			&i.Addressdetails,
			&i.Orgid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
