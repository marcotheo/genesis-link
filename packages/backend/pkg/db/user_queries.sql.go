// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_queries.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  userId, email, firstName, lastName
) VALUES (
  ?, ?, ?, ?
)
RETURNING userid, firstname, lastname, email, mobilenumber, resumelink, google_id, created_at, updated_at
`

type CreateUserParams struct {
	Userid    string
	Email     string
	Firstname string
	Lastname  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Userid,
		arg.Email,
		arg.Firstname,
		arg.Lastname,
	)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Mobilenumber,
		&i.Resumelink,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createUserSkill = `-- name: CreateUserSkill :exec
INSERT INTO user_skills (
    skillId,
    userId,
    skillName,
    skillLevel,
    skillCategory
) VALUES (
    ?, ?, ?, ?, ?
)
`

type CreateUserSkillParams struct {
	Skillid       string
	Userid        string
	Skillname     string
	Skilllevel    sql.NullString
	Skillcategory sql.NullString
}

func (q *Queries) CreateUserSkill(ctx context.Context, arg CreateUserSkillParams) error {
	_, err := q.db.ExecContext(ctx, createUserSkill,
		arg.Skillid,
		arg.Userid,
		arg.Skillname,
		arg.Skilllevel,
		arg.Skillcategory,
	)
	return err
}

const getSavedPostsByUserId = `-- name: GetSavedPostsByUserId :many
SELECT 
  s.savedPostId,
  s.postId,
  p.title,
  p.description,
  p.workSetup,
  o.company,
  jd.jobType,
  jd.salaryAmountMin,
  jd.salaryAmountMax,
  jd.salaryCurrency,
  jd.salaryType,
  a.country,
  a.city,
  COALESCE(GROUP_CONCAT(pt.tagName, ', '), '') AS tags,
  p.posted_at
FROM saved_posts s
LEFT JOIN posts p ON s.postId = p.postId
LEFT JOIN addresses a ON p.addressId = a.addressId
LEFT JOIN organizations o ON p.orgId = o.orgId
LEFT JOIN post_tags pt ON p.postId = pt.postId
LEFT JOIN job_details jd ON p.postId = jd.postId
WHERE s.userId = ?
LIMIT ? OFFSET ?
`

type GetSavedPostsByUserIdParams struct {
	Userid string
	Limit  int64
	Offset int64
}

type GetSavedPostsByUserIdRow struct {
	Savedpostid     string
	Postid          string
	Title           sql.NullString
	Description     sql.NullString
	Worksetup       sql.NullString
	Company         sql.NullString
	Jobtype         sql.NullString
	Salaryamountmin sql.NullInt64
	Salaryamountmax sql.NullInt64
	Salarycurrency  sql.NullString
	Salarytype      sql.NullString
	Country         sql.NullString
	City            sql.NullString
	Tags            interface{}
	PostedAt        sql.NullTime
}

func (q *Queries) GetSavedPostsByUserId(ctx context.Context, arg GetSavedPostsByUserIdParams) ([]GetSavedPostsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getSavedPostsByUserId, arg.Userid, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSavedPostsByUserIdRow
	for rows.Next() {
		var i GetSavedPostsByUserIdRow
		if err := rows.Scan(
			&i.Savedpostid,
			&i.Postid,
			&i.Title,
			&i.Description,
			&i.Worksetup,
			&i.Company,
			&i.Jobtype,
			&i.Salaryamountmin,
			&i.Salaryamountmax,
			&i.Salarycurrency,
			&i.Salarytype,
			&i.Country,
			&i.City,
			&i.Tags,
			&i.PostedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT userid, firstname, lastname, email, mobilenumber, resumelink, google_id, created_at, updated_at FROM users
WHERE userId = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userid)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Firstname,
		&i.Lastname,
		&i.Email,
		&i.Mobilenumber,
		&i.Resumelink,
		&i.GoogleID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserSkillsByUserId = `-- name: GetUserSkillsByUserId :many
SELECT 
    skillId,
    skillName,
    skillLevel,
    skillCategory
FROM user_skills
WHERE userId = ?
`

type GetUserSkillsByUserIdRow struct {
	Skillid       string
	Skillname     string
	Skilllevel    sql.NullString
	Skillcategory sql.NullString
}

func (q *Queries) GetUserSkillsByUserId(ctx context.Context, userid string) ([]GetUserSkillsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getUserSkillsByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserSkillsByUserIdRow
	for rows.Next() {
		var i GetUserSkillsByUserIdRow
		if err := rows.Scan(
			&i.Skillid,
			&i.Skillname,
			&i.Skilllevel,
			&i.Skillcategory,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmail = `-- name: UpdateEmail :exec
UPDATE users
SET email = ?
WHERE userId = ?
`

type UpdateEmailParams struct {
	Email  string
	Userid string
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.Email, arg.Userid)
	return err
}

const updateMobileNumber = `-- name: UpdateMobileNumber :exec
UPDATE users
SET mobileNumber = ?
WHERE userId = ?
`

type UpdateMobileNumberParams struct {
	Mobilenumber sql.NullString
	Userid       string
}

func (q *Queries) UpdateMobileNumber(ctx context.Context, arg UpdateMobileNumberParams) error {
	_, err := q.db.ExecContext(ctx, updateMobileNumber, arg.Mobilenumber, arg.Userid)
	return err
}

const updateResumeLink = `-- name: UpdateResumeLink :exec
UPDATE users
SET resumeLink = ?
WHERE userId = ?
`

type UpdateResumeLinkParams struct {
	Resumelink sql.NullString
	Userid     string
}

func (q *Queries) UpdateResumeLink(ctx context.Context, arg UpdateResumeLinkParams) error {
	_, err := q.db.ExecContext(ctx, updateResumeLink, arg.Resumelink, arg.Userid)
	return err
}
