// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_queries.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  userId, email
) VALUES (
  ?, ?
)
RETURNING userid, email, mobilenumber, resumelink, created_at, updated_at
`

type CreateUserParams struct {
	Userid string
	Email  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Userid, arg.Email)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Email,
		&i.Mobilenumber,
		&i.Resumelink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT userid, email, mobilenumber, resumelink, created_at, updated_at FROM users
WHERE userId = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userid)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Email,
		&i.Mobilenumber,
		&i.Resumelink,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPost = `-- name: GetUserPost :one
SELECT postId FROM posts
WHERE postId = ? AND userId = ?
`

type GetUserPostParams struct {
	Postid string
	Userid string
}

func (q *Queries) GetUserPost(ctx context.Context, arg GetUserPostParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPost, arg.Postid, arg.Userid)
	var postid string
	err := row.Scan(&postid)
	return postid, err
}

const updateEmail = `-- name: UpdateEmail :exec
UPDATE users
SET email = ?
WHERE userId = ?
`

type UpdateEmailParams struct {
	Email  string
	Userid string
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateEmail, arg.Email, arg.Userid)
	return err
}

const updateMobileNumber = `-- name: UpdateMobileNumber :exec
UPDATE users
SET mobileNumber = ?
WHERE userId = ?
`

type UpdateMobileNumberParams struct {
	Mobilenumber sql.NullString
	Userid       string
}

func (q *Queries) UpdateMobileNumber(ctx context.Context, arg UpdateMobileNumberParams) error {
	_, err := q.db.ExecContext(ctx, updateMobileNumber, arg.Mobilenumber, arg.Userid)
	return err
}

const updateResumeLink = `-- name: UpdateResumeLink :exec
UPDATE users
SET resumeLink = ?
WHERE userId = ?
`

type UpdateResumeLinkParams struct {
	Resumelink sql.NullString
	Userid     string
}

func (q *Queries) UpdateResumeLink(ctx context.Context, arg UpdateResumeLinkParams) error {
	_, err := q.db.ExecContext(ctx, updateResumeLink, arg.Resumelink, arg.Userid)
	return err
}
