// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createAddress = `-- name: CreateAddress :exec
INSERT INTO addresses (
    addressId,
    country,
    region,
    province,
    city,
    barangay,
    addressDetails,
    userId
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING addressid, country, region, province, city, barangay, addressdetails, userid
`

type CreateAddressParams struct {
	Addressid      string
	Country        string
	Region         sql.NullString
	Province       sql.NullString
	City           sql.NullString
	Barangay       sql.NullString
	Addressdetails sql.NullString
	Userid         sql.NullString
}

func (q *Queries) CreateAddress(ctx context.Context, arg CreateAddressParams) error {
	_, err := q.db.ExecContext(ctx, createAddress,
		arg.Addressid,
		arg.Country,
		arg.Region,
		arg.Province,
		arg.City,
		arg.Barangay,
		arg.Addressdetails,
		arg.Userid,
	)
	return err
}

const createJobDetails = `-- name: CreateJobDetails :exec
INSERT INTO job_details (
    jobDetailId,
    postId,
    jobType,
    salaryType,
    salaryAmountMin,
    salaryAmountMax,
    salaryCurrency
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
)
RETURNING jobdetailid, postid, jobtype, salarytype, salaryamountmin, salaryamountmax, salarycurrency
`

type CreateJobDetailsParams struct {
	Jobdetailid     string
	Postid          string
	Jobtype         string
	Salarytype      sql.NullString
	Salaryamountmin sql.NullInt64
	Salaryamountmax sql.NullInt64
	Salarycurrency  sql.NullString
}

func (q *Queries) CreateJobDetails(ctx context.Context, arg CreateJobDetailsParams) error {
	_, err := q.db.ExecContext(ctx, createJobDetails,
		arg.Jobdetailid,
		arg.Postid,
		arg.Jobtype,
		arg.Salarytype,
		arg.Salaryamountmin,
		arg.Salaryamountmax,
		arg.Salarycurrency,
	)
	return err
}

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (
    postId,
    company,
    title,
    description,
    posterLink,
    logoLink,
    additionalInfoLink,
    wfh,
    email,
    phone,
    deadline,
    addressId,
    userId
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
RETURNING postid, company, title, description, posterlink, logolink, additionalinfolink, wfh, email, phone, deadline, addressid, userid, posted_at, updated_at
`

type CreatePostParams struct {
	Postid             string
	Company            string
	Title              string
	Description        sql.NullString
	Posterlink         sql.NullString
	Logolink           sql.NullString
	Additionalinfolink sql.NullString
	Wfh                sql.NullInt64
	Email              sql.NullString
	Phone              sql.NullString
	Deadline           sql.NullInt64
	Addressid          string
	Userid             string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost,
		arg.Postid,
		arg.Company,
		arg.Title,
		arg.Description,
		arg.Posterlink,
		arg.Logolink,
		arg.Additionalinfolink,
		arg.Wfh,
		arg.Email,
		arg.Phone,
		arg.Deadline,
		arg.Addressid,
		arg.Userid,
	)
	return err
}

const createPostRequirement = `-- name: CreatePostRequirement :exec
INSERT INTO post_requirements (
    requirementId,
    postId,
    requirementType,
    requirement
) VALUES (
    ?, ?, ?, ?
)
RETURNING requirementid, postid, requirementtype, requirement
`

type CreatePostRequirementParams struct {
	Requirementid   string
	Postid          string
	Requirementtype string
	Requirement     string
}

func (q *Queries) CreatePostRequirement(ctx context.Context, arg CreatePostRequirementParams) error {
	_, err := q.db.ExecContext(ctx, createPostRequirement,
		arg.Requirementid,
		arg.Postid,
		arg.Requirementtype,
		arg.Requirement,
	)
	return err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  userId, email
) VALUES (
  ?, ?
)
RETURNING userid, email, created_at, updated_at
`

type CreateUserParams struct {
	Userid string
	Email  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Userid, arg.Email)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAddress = `-- name: DeleteAddress :exec
DELETE FROM addresses
WHERE addressId = ? AND userId = ?
`

type DeleteAddressParams struct {
	Addressid string
	Userid    sql.NullString
}

func (q *Queries) DeleteAddress(ctx context.Context, arg DeleteAddressParams) error {
	_, err := q.db.ExecContext(ctx, deleteAddress, arg.Addressid, arg.Userid)
	return err
}

const getAllAddressByUserId = `-- name: GetAllAddressByUserId :many
SELECT addressid, country, region, province, city, barangay, addressdetails, userid FROM addresses
WHERE userId = ?
`

func (q *Queries) GetAllAddressByUserId(ctx context.Context, userid sql.NullString) ([]Address, error) {
	rows, err := q.db.QueryContext(ctx, getAllAddressByUserId, userid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Address
	for rows.Next() {
		var i Address
		if err := rows.Scan(
			&i.Addressid,
			&i.Country,
			&i.Region,
			&i.Province,
			&i.City,
			&i.Barangay,
			&i.Addressdetails,
			&i.Userid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostCountByUserId = `-- name: GetPostCountByUserId :one
SELECT  
    COUNT(*) AS total_count
FROM posts
WHERE userId = ?
`

func (q *Queries) GetPostCountByUserId(ctx context.Context, userid string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getPostCountByUserId, userid)
	var total_count int64
	err := row.Scan(&total_count)
	return total_count, err
}

const getPostDetailsByPostId = `-- name: GetPostDetailsByPostId :one
SELECT  
   p.postid, p.company, p.title, p.description, p.posterlink, p.logolink, p.additionalinfolink, p.wfh, p.email, p.phone, p.deadline, p.addressid, p.userid, p.posted_at, p.updated_at,
   jb.jobdetailid, jb.postid, jb.jobtype, jb.salarytype, jb.salaryamountmin, jb.salaryamountmax, jb.salarycurrency
FROM posts p
LEFT JOIN job_details jb
ON p.postId = jb.postId
WHERE p.postId = ?
`

type GetPostDetailsByPostIdRow struct {
	Postid             string
	Company            string
	Title              string
	Description        sql.NullString
	Posterlink         sql.NullString
	Logolink           sql.NullString
	Additionalinfolink sql.NullString
	Wfh                sql.NullInt64
	Email              sql.NullString
	Phone              sql.NullString
	Deadline           sql.NullInt64
	Addressid          string
	Userid             string
	PostedAt           sql.NullTime
	UpdatedAt          sql.NullTime
	Jobdetailid        sql.NullString
	Postid_2           sql.NullString
	Jobtype            sql.NullString
	Salarytype         sql.NullString
	Salaryamountmin    sql.NullInt64
	Salaryamountmax    sql.NullInt64
	Salarycurrency     sql.NullString
}

func (q *Queries) GetPostDetailsByPostId(ctx context.Context, postid string) (GetPostDetailsByPostIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPostDetailsByPostId, postid)
	var i GetPostDetailsByPostIdRow
	err := row.Scan(
		&i.Postid,
		&i.Company,
		&i.Title,
		&i.Description,
		&i.Posterlink,
		&i.Logolink,
		&i.Additionalinfolink,
		&i.Wfh,
		&i.Email,
		&i.Phone,
		&i.Deadline,
		&i.Addressid,
		&i.Userid,
		&i.PostedAt,
		&i.UpdatedAt,
		&i.Jobdetailid,
		&i.Postid_2,
		&i.Jobtype,
		&i.Salarytype,
		&i.Salaryamountmin,
		&i.Salaryamountmax,
		&i.Salarycurrency,
	)
	return i, err
}

const getPostsByUserId = `-- name: GetPostsByUserId :many
SELECT  
    postId,
    title,
    company,
    deadline
FROM posts
WHERE userId = ?
ORDER BY posted_at DESC
LIMIT 10 OFFSET ?
`

type GetPostsByUserIdParams struct {
	Userid string
	Offset int64
}

type GetPostsByUserIdRow struct {
	Postid   string
	Title    string
	Company  string
	Deadline sql.NullInt64
}

func (q *Queries) GetPostsByUserId(ctx context.Context, arg GetPostsByUserIdParams) ([]GetPostsByUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserId, arg.Userid, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsByUserIdRow
	for rows.Next() {
		var i GetPostsByUserIdRow
		if err := rows.Scan(
			&i.Postid,
			&i.Title,
			&i.Company,
			&i.Deadline,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT userid, email, created_at, updated_at FROM users
WHERE userId = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userid string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userid)
	var i User
	err := row.Scan(
		&i.Userid,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserPost = `-- name: GetUserPost :one
SELECT postId FROM posts
WHERE postId = ? AND userId = ?
`

type GetUserPostParams struct {
	Postid string
	Userid string
}

func (q *Queries) GetUserPost(ctx context.Context, arg GetUserPostParams) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPost, arg.Postid, arg.Userid)
	var postid string
	err := row.Scan(&postid)
	return postid, err
}

const updatePostAdditionalInfoLink = `-- name: UpdatePostAdditionalInfoLink :exec
UPDATE posts
SET additionalInfoLink = ?
WHERE postId = ? AND userId = ?
`

type UpdatePostAdditionalInfoLinkParams struct {
	Additionalinfolink sql.NullString
	Postid             string
	Userid             string
}

func (q *Queries) UpdatePostAdditionalInfoLink(ctx context.Context, arg UpdatePostAdditionalInfoLinkParams) error {
	_, err := q.db.ExecContext(ctx, updatePostAdditionalInfoLink, arg.Additionalinfolink, arg.Postid, arg.Userid)
	return err
}
