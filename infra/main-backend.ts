import * as path from "path";
import { getSiteUrl } from "./utils";

export const main_backend = async ({
  bucket,
  poolId,
  poolClientId,
  poolClientSecret,
}: {
  bucket: $util.Output<string>;
  poolId: $util.Output<string>;
  poolClientId: $util.Output<string>;
  poolClientSecret: $util.Output<string>;
}) => {
  if (!["production", "preview"].includes($app.stage)) return {};

  const callerIdentity = aws.getCallerIdentity();
  const accountId = await callerIdentity.then((identity) => identity.accountId);

  // Create an AWS Lambda function
  const role = new aws.iam.Role(`${process.env.PROJ_NAME}BackendRole`, {
    assumeRolePolicy: {
      Version: "2012-10-17",
      Statement: [
        {
          Action: "sts:AssumeRole",
          Principal: {
            Service: "lambda.amazonaws.com",
          },
          Effect: "Allow",
        },
      ],
    },
  });

  new aws.iam.RolePolicy(`${process.env.PROJ_NAME}BackendRolePolicy`, {
    role: role.id,
    policy: {
      Version: "2012-10-17",
      Statement: [
        {
          Action: [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
          ],
          Effect: "Allow",
          Resource: "*",
        },
        {
          Action: ["cognito-idp:*"],
          Effect: "Allow",
          Resource: [
            `arn:aws:cognito-idp:${aws.config.region}:${accountId}:userpool/*`,
          ],
        },
      ],
    },
  });

  const rootDir = process.cwd();

  const filePath = path.resolve(rootDir, "packages/backend/deployment.zip");

  const lambdaFunction = $util
    .all([poolId, poolClientId, poolClientSecret, getSiteUrl(), bucket])
    .apply(
      ([var1, var2, var3, var4, var5]) =>
        new aws.lambda.Function(`${process.env.PROJ_NAME}Lambda`, {
          runtime: aws.lambda.Runtime.CustomAL2023,
          code: new $util.asset.FileArchive(filePath),
          timeout: 10,
          role: role.arn,
          handler: "bootstrap", // Custom runtimes can have handler set to an empty string ""
          environment: {
            variables: {
              POOL_ID: var1,
              POOL_CLIENT_ID: var2,
              POOL_CLIENT_SECRET: var3,
              ALLOWED_ORIGINS: var4,
              DB_URL: process.env.DB_URL,
              AUTH_SESSION_SECRET:
                process.env.AUTH_SESSION_SECRET ?? "simple-secret",
              DOMAIN: process.env.DOMAIN,
              ASSET_BUCKET: var5,
            },
          },
        })
    );

  // Create an API Gateway
  const api = new aws.apigatewayv2.Api(`${process.env.PROJ_NAME}APIGateway`, {
    protocolType: "HTTP",
  });

  const integration = new aws.apigatewayv2.Integration(
    `${process.env.PROJ_NAME}APIGatewayIntegration`,
    {
      apiId: api.id,
      integrationType: "AWS_PROXY",
      integrationUri: lambdaFunction.arn,
      integrationMethod: "ANY",
      payloadFormatVersion: "2.0",
      passthroughBehavior: "WHEN_NO_TEMPLATES",
    }
  );

  new aws.apigatewayv2.Route(`${process.env.PROJ_NAME}APIGatewayRoute`, {
    apiId: api.id,
    routeKey: "$default",
    target: $util.interpolate`integrations/${integration.id}`,
  });

  const apiStage = new aws.apigatewayv2.Stage(
    `${process.env.PROJ_NAME}APIGatewayDeployment`,
    {
      apiId: api.id,
      autoDeploy: true,
      name: "$default",
    }
  );

  // Grant permissions
  new aws.lambda.Permission(`${process.env.PROJ_NAME}APIGatewayPermssions`, {
    action: "lambda:InvokeFunction",
    function: lambdaFunction,
    principal: "apigateway.amazonaws.com",
    sourceArn: $util.interpolate`${api.executionArn}/*/*`,
  });

  // Custom Domain
  const domainName =
    `api.${process.env.APP_NAME}${$app.stage === "production" ? "." : `-${$app.stage}.`}` +
    process.env.DOMAIN;

  const customDomain = new aws.apigatewayv2.DomainName("CustomDomain", {
    domainName,
    domainNameConfiguration: {
      certificateArn: process.env.ACM_ARN,
      endpointType: "REGIONAL", // or "EDGE" depending on your requirements
      securityPolicy: "TLS_1_2",
    },
  });

  new aws.apigatewayv2.ApiMapping("ApiDomainMapping", {
    apiId: api.id,
    domainName: customDomain.id,
    stage: apiStage.name,
  });

  // Add the Route 53 DNS record
  new aws.route53.Record("apiDnsRecord", {
    name: domainName,
    type: "CNAME",
    zoneId: process.env.ZONE_ID,
    records: [customDomain.domainNameConfiguration.targetDomainName], // Generated by API Gateway
    ttl: 300,
  });

  return {
    apiUrl: domainName,
    functionName: lambdaFunction.name,
    functionRole: role.name,
  };
};
